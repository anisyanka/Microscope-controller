From 893535e7e19b6e3476741a751b937ca0f5e182ec Mon Sep 17 00:00:00 2001
From: Aleksandr Anisimov <anisimov.alexander.s@gmail.com>
Date: Tue, 23 Jan 2024 07:57:25 +0300
Subject: [PATCH] Add patch to use transaction ID in raw send function

---
 src/modbus.c             |  4 ++--
 src/modbus.h             |  2 +-
 tests/unit-test-client.c | 14 +++++++-------
 tests/unit-test-server.c |  2 +-
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/src/modbus.c b/src/modbus.c
index 0360d5c..ab5ec4c 100644
--- a/src/modbus.c
+++ b/src/modbus.c
@@ -220,7 +220,7 @@ static int send_msg(modbus_t *ctx, uint8_t *msg, int msg_length)
     return rc;
 }
 
-int modbus_send_raw_request(modbus_t *ctx, const uint8_t *raw_req, int raw_req_length)
+int modbus_send_raw_request(modbus_t *ctx, const uint8_t *raw_req, int raw_req_length, int tid)
 {
     sft_t sft;
     uint8_t req[MAX_MESSAGE_LENGTH];
@@ -242,7 +242,7 @@ int modbus_send_raw_request(modbus_t *ctx, const uint8_t *raw_req, int raw_req_l
     sft.slave = raw_req[0];
     sft.function = raw_req[1];
     /* The t_id is left to zero */
-    sft.t_id = 0;
+    sft.t_id = tid;
     /* This response function only set the header so it's convenient here */
     req_length = ctx->backend->build_response_basis(&sft, req);
 
diff --git a/src/modbus.h b/src/modbus.h
index 55ef08a..9be53d7 100644
--- a/src/modbus.h
+++ b/src/modbus.h
@@ -255,7 +255,7 @@ MODBUS_API modbus_mapping_t *modbus_mapping_new(int nb_bits,
 MODBUS_API void modbus_mapping_free(modbus_mapping_t *mb_mapping);
 
 MODBUS_API int
-modbus_send_raw_request(modbus_t *ctx, const uint8_t *raw_req, int raw_req_length);
+modbus_send_raw_request(modbus_t *ctx, const uint8_t *raw_req, int raw_req_length, int tid);
 
 MODBUS_API int modbus_receive(modbus_t *ctx, uint8_t *req);
 
diff --git a/tests/unit-test-client.c b/tests/unit-test-client.c
index 6a25d36..6752010 100644
--- a/tests/unit-test-client.c
+++ b/tests/unit-test-client.c
@@ -526,8 +526,8 @@ int main(int argc, char *argv[])
          * slave ID to simulate a communication on a RS485 bus. At first, the
          * slave will see the indication message then the confirmation, and it must
          * ignore both. */
-        modbus_send_raw_request(ctx, raw_req, RAW_REQ_LENGTH * sizeof(uint8_t));
-        modbus_send_raw_request(ctx, raw_rsp, RAW_RSP_LENGTH * sizeof(uint8_t));
+        modbus_send_raw_request(ctx, raw_req, RAW_REQ_LENGTH * sizeof(uint8_t), 0);
+        modbus_send_raw_request(ctx, raw_rsp, RAW_RSP_LENGTH * sizeof(uint8_t), 0);
         rc = modbus_receive_confirmation(ctx, rsp);
 
         printf("1-B/3 No response from slave %d on indication/confirmation messages: ",
@@ -535,7 +535,7 @@ int main(int argc, char *argv[])
         ASSERT_TRUE(rc == -1 && errno == ETIMEDOUT, "");
 
         /* Send an INVALID request for another slave */
-        modbus_send_raw_request(ctx, raw_invalid_req, RAW_REQ_LENGTH * sizeof(uint8_t));
+        modbus_send_raw_request(ctx, raw_invalid_req, RAW_REQ_LENGTH * sizeof(uint8_t), 0);
         rc = modbus_receive_confirmation(ctx, rsp);
 
         printf("1-C/3 No response from slave %d with invalid request: ",
@@ -842,8 +842,8 @@ int test_server(modbus_t *ctx, int use_backend)
     printf("* modbus_receive with invalid socket: ");
     ASSERT_TRUE(rc == -1, "FAILED (%d)\n", rc);
 
-    req_length = modbus_send_raw_request(ctx, read_raw_req, READ_RAW_REQ_LEN);
-    printf("* modbus_send_raw_request: ");
+    req_length = modbus_send_raw_request(ctx, read_raw_req, READ_RAW_REQ_LEN, 0);
+    printf("* modbus_send_raw_request: ", 0);
     ASSERT_TRUE(req_length == (backend_length + 5), "FAILED (%d)\n", req_length);
 
     printf("* modbus_receive_confirmation: ");
@@ -924,7 +924,7 @@ int test_server(modbus_t *ctx, int use_backend)
 
     /* Test invalid function code */
     modbus_send_raw_request(
-        ctx, invalid_fc_raw_req, INVALID_FC_REQ_LEN * sizeof(uint8_t));
+        ctx, invalid_fc_raw_req, INVALID_FC_REQ_LEN * sizeof(uint8_t), 0);
     rc = modbus_receive_confirmation(ctx, rsp);
     printf("Return an exception on unknown function code: ");
     ASSERT_TRUE(rc == (backend_length + EXCEPTION_RC) &&
@@ -972,7 +972,7 @@ int send_crafted_request(modbus_t *ctx,
             }
         }
 
-        modbus_send_raw_request(ctx, req, req_len * sizeof(uint8_t));
+        modbus_send_raw_request(ctx, req, req_len * sizeof(uint8_t), 0);
         if (j == 0) {
             printf(
                 "* try function 0x%X: %s 0 values: ", function, bytes ? "write" : "read");
diff --git a/tests/unit-test-server.c b/tests/unit-test-server.c
index 561d64d..713b4fb 100644
--- a/tests/unit-test-server.c
+++ b/tests/unit-test-server.c
@@ -174,7 +174,7 @@ int main(int argc, char *argv[])
                                      0x00};
 
                 printf("Reply with an invalid TID or slave\n");
-                modbus_send_raw_request(ctx, raw_req, RAW_REQ_LENGTH * sizeof(uint8_t));
+                modbus_send_raw_request(ctx, raw_req, RAW_REQ_LENGTH * sizeof(uint8_t), 0);
                 continue;
             } else if (MODBUS_GET_INT16_FROM_INT8(query, header_length + 1) ==
                        UT_REGISTERS_ADDRESS_SLEEP_500_MS) {
-- 
2.39.1

